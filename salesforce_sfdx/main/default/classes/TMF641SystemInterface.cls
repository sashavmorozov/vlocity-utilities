/**
* @author amorozov@vlocity.com
* @date 2019
*
* @group Order Management
* @group-content n/a
*
* @description Custom extension of a default order management integration adapter for sync communication mode
* to produce payload according to TMF641 Service Ordering API REST Specification R18.5.1 (refer to 
* https://www.tmforum.org/resources/specification/tmf641-service-ordering-api-rest-specification-r18-5-0/
* for more details).
* At this moment, the interface is tailored to generate payload for a single order item only
* The interface supports both simple (text, integer, etc.) and complex (object) characteristics
* The interface expects the product model to be structured in a certain way (see more details in the 
* corresponding supporting specifications)
*/

global virtual class TMF641SystemInterface extends vlocity_cmt.DefaultSystemInterface {
    global TMF641SystemInterface() {

    }

    /***************************************************************************************************************
     * @description Generates TMF641-compliant payload based on fulfillment requests
     * @param
     * @return request payload as string
     * @example
     * invoked by Vlocity XOM, not invoked directly
     */

    global override virtual String generatePayload(vlocity_cmt__OrchestrationItem__c item, vlocity_cmt.XOMOrderDomainObject orderObj) {

        /* Test data for troubleshooting */
        //vlocity_cmt__OrchestrationItem__c item = [select Id from vlocity_cmt__OrchestrationItem__c where Id = 'a2b4J000000E9lGQAS'];

        vlocity_cmt__OrchestrationItem__c itemExt = [
            select
                Id,
                Name,
                vlocity_cmt__FulfilmentRequestLineId__r.vlocity_cmt__FulfilmentRequestID__c,
                vlocity_cmt__AutoTaskParameters__c
            from
                vlocity_cmt__OrchestrationItem__c
            where
                Id =: item.Id
        ];

        System.debug('***** itemExt: ' + itemExt);

        /* collecing fulfillment request lines for an orchestration item */
        vlocity_cmt__FulfilmentRequestLine__c fulfilmentRequestLine = [
            select
                Id,
                Name
            from
                vlocity_cmt__FulfilmentRequestLine__c
            where
                Id =: itemExt.vlocity_cmt__FulfilmentRequestLineId__c
            limit
                1
        ];

        if (fulfilmentRequestLine == null) {
            throw new vlocity_cmt.DefaultSystemInterface.DefaultInterfaceUnrecoverableException ('Unrecoverable exception: ' + 
                'No fulfilment request record found for an orchestration item');
        }

        /* Generate a new TMF641-compliant message using an external class and standard payload for further merge */
        
        //String tmf641DRName = 'TMF641 Message Shell Generator';
        String tmf641DRName = (String) ((Map <String, Object>) JSON.deserializeUntyped(itemExt.vlocity_cmt__AutoTaskParameters__c)).get('shellRequestDataRaptorName');
        
        if (String.isBlank(tmf641DRName)) {
            throw new vlocity_cmt.DefaultSystemInterface.DefaultInterfaceUnrecoverableException ('Unrecoverable exception: ' + 
                'No dataraptor attached to the callout to generate a payload');
        }

        Map <String, String> sourceJson = new Map <String, String> {
			'fulfilmentRequestLineId' => fulfilmentRequestLine.Id
		}; 
        vlocity_cmt.DRProcessResult drResult = vlocity_cmt.DRGlobal.process(sourceJson, tmf641DRName);
        TMF641ServiceOrderRequest tmf641Request = TMF641ServiceOrderRequest.parse(drResult.toResponseString());

		if (tmf641Request == null) {
            throw new vlocity_cmt.DefaultSystemInterface.DefaultInterfaceUnrecoverableException ('Unrecoverable exception: ' + 
                'Unable to craft TMF641 Request. Check TMF641 dataraptor configuration');
        }
    
        String defaultRequest = super.generatePayload(item, orderObj);

        if (String.isBlank(defaultRequest)) {
            throw new vlocity_cmt.DefaultSystemInterface.DefaultInterfaceUnrecoverableException ('Unrecoverable exception: ' + 
                'Default payload is empty. Check no request dataraptors attached to the callout');
        }

        /* For this implementation, assume that there is only one root order_item element in a payload generated by default system interface */

        Object defaultRequestObj = JSON.deserializeUntyped(defaultRequest);
        List <Object> order_items = (List <Object>)((Map <String, Object>) defaultRequestObj).get('order_items');
        
        for (Object order_item: order_items) {
            Map <String, Object> order_item_map = (Map <String, Object>) order_item;
            List <Object> described_by = (List <Object>) order_item_map.get('described_by');
            List <Object> order_items_level2 = (List <Object>) order_item_map.get('order_items');

            /* add original described_by characteristics of the root item into TMF641 request */
            for (Object described_by_element: described_by) {
                Map <String, Object> described_by_element_map = (Map <String, Object>) described_by_element;

                //TODO: Consider supporing value types other than text. Check TMF641 spec for directions
                String atomicCharacteristicName = (String) described_by_element_map.get('characteristic');
                String atomicCharacteristicValueType = 'text';
                String atomicCharacteristicValue = (String) described_by_element_map.get('value');

                System.debug('*** Atomic characteristic: [' + atomicCharacteristicName + ', ' + atomicCharacteristicValue + ']');

                TMF641ServiceOrderRequest.AtomicServiceCharacteristic atomicChar = new TMF641ServiceOrderRequest.AtomicServiceCharacteristic(
                    atomicCharacteristicName,
                    atomicCharacteristicValueType,
                    atomicCharacteristicValue
                );

                tmf641Request.orderItem[0].service.serviceCharacteristic.add(atomicChar);
            }

            /* add original described_by characteristics of the child item into TMF641 request as complex (object) characteristics */
            if (order_items_level2 != null) {
                for (Object order_items_level2_element: order_items_level2) {

                    Map <String, Object> order_items_level2_element_map = (Map <String, Object>) order_items_level2_element;

                    String action = (String) order_items_level2_element_map.get('action');
                    String specificationId = (String)((Map <String, Object>) order_items_level2_element_map.get('specified_by')).get('specification_id');
                    String specificationName = (String)((Map <String, Object>) order_items_level2_element_map.get('specified_by')).get('specification_name');
                    String valueType = 'object';

                    List <Object> described_by_level2 = (List <Object>) order_items_level2_element_map.get('described_by');

                    Map <String, String> objectCharacteristicValue = new Map <String, String> ();

                    for (Object described_by_element: described_by_level2) {
                        Map <String, Object> described_by_element_map = (Map <String, Object>) described_by_element;
                        String characteristicName = (String) described_by_element_map.get('characteristic');
                        String characteristicValue = (String) described_by_element_map.get('value');

                        System.debug('*** Level 2 characteristic: [' + characteristicName + ', ' + characteristicValue + ']');
                        objectCharacteristicValue.put(characteristicName, characteristicValue);
                    }

                    TMF641ServiceOrderRequest.ObjectServiceCharacteristic objectChar = new TMF641ServiceOrderRequest.ObjectServiceCharacteristic(
                        specificationName,
                        'object',
                        objectCharacteristicValue
                    );
                    
                    objectCharacteristicValue.put('type', specificationName);
                    
                    tmf641Request.orderItem[0].service.serviceCharacteristic.add(objectChar);
                }
            }
        }

		String tmf641RequestAsString = JSON.serializePretty(tmf641Request, true);
        item.vlocity_cmt__Request__c = tmf641RequestAsString;
        return tmf641RequestAsString;
    }

    /***************************************************************************************************************
     * @description Invokes default response processing logic and then stores received payload into a field.
     * Extends a returned callout with additional values to assist with response processing
     * @param vlocity_cmt__OrchestrationItem__c item
     * @param String url
     * @param String path
     * @param vlocity_cmt.XOMOrderDomainObject orderObj
     * @param HttpResponse resp
     * @return 
     * @example
     * invoked by Vlocity XOM, not invoked directly
     */

    global override virtual void processResponse(
        vlocity_cmt__OrchestrationItem__c item,
        String url,
        String path,
        vlocity_cmt.XOMOrderDomainObject orderObj,
        HttpResponse resp) {

        //extension: add supporting information to the response to facilitate response processing business logic
        String responseBody = resp.getBody();
        Map <String, Object> responseObj = (Map <String, Object>) JSON.deserializeUntyped(responseBody);
        responseObj.put('orchestrationItemId', item.Id);
        responseObj.put('orchestrationPlanId', orderObj.getOrchestrationPlanId());

        String orchestrationPlanSourceEntityType = orderObj.getObjectType().getDescribe().getLabel();
        responseObj.put('orchestrationPlanSourceEntityType', orchestrationPlanSourceEntityType);

        if (orchestrationPlanSourceEntityType == 'Order') {
            responseObj.put('orderId', orderObj.getId());
        } else {
            //this is executed if orchestrationPlanSourceEntityType is Fulfilment Request
            responseObj.put('fulfilmentRequestId', orderObj.getId());
        }

        resp.setBody(JSON.serialize(responseObj));

        super.processResponse(item, url, path, orderObj, resp);

        String response = resp.getBody();
        item.vlocity_cmt__Response__c = response;

        /* additional error processing business logic */
        /*
           if (errorCodeFound) {
            throw new vlocity_cmt.DefaultSystemInterface.DefaultInterfaceUnrecoverableException (errorDesc);
           }
        */
    }

    
    /***************************************************************************************************************
     * @description Default item execution business logic
     * @param String url
     * @param String path
     * @param vlocity_cmt__OrchestrationItem__c item
     * @return 
     * @example
     * invoked by Vlocity XOM, not invoked directly
     */

    global override virtual void executeItem(
        String url,
        String path,
        vlocity_cmt__OrchestrationItem__c item) {
        super.executeItem(url, path, item);
    }

}